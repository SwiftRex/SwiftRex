// sourcery:file:TypeErase.generated.abstract.swift
@inline(never)
private func _abstract(file: StaticString = #file, line: UInt = #line) -> Never {
    fatalError("Method must be overridden", file: file, line: line)
}
{% for type in types.protocols|annotated:"TypeErase" %}

// MARK: - Type Eraser for {{type.name}}

internal class _Any{{type.name}}Base<{{type.annotations.TypeErase}}>: {{type.name}} {
    init() {
        guard type(of: self) != _Any{{type.name}}Base.self else {
            _abstract()
        }
    }

    {% for m in type.methods|!definedInExtension %}
    func {{m.name}} -> {{m.returnTypeName}} {
        _abstract()
    }

    {% endfor %}
    {% for p in type.variables %}
    var {{p.name}}: {{p.typeName}} {
        get { _abstract() }
        {% if p.isMutable %}set { _abstract() }{% endif %}
    }
    {% endfor %}
}
{% endfor %}
// sourcery:end
{% for type in types.protocols|annotated:"TypeErase" %}

// MARK: - Type Eraser for {{type.name}}

private final class _Any{{type.name}}Box<Concrete: {{type.name}}>: _Any{{type.name}}Base<Concrete.{{type.annotations.TypeErase}}> {
    var concrete: Concrete
    typealias {{type.annotations.TypeErase}} = Concrete.{{type.annotations.TypeErase}}

    init(_ concrete: Concrete) {
        self.concrete = concrete
    }

    {% for m in type.methods|!definedInExtension %}
    override func {{m.name}} -> {{m.returnTypeName}} {
        return concrete.{{m.callName}}({% for p in m.parameters %}{% if p.argumentLabel != nil %}{{p.argumentLabel}}: {% endif %}{{p.name}}{% if not forloop.last %}, {% endif %}{% endfor %})
    }
    {% endfor %}

    {% for p in type.variables %}
    override var {{p.name}}: {{p.typeName}} {
        get { return concrete.{{p.name}} }
        {% if p.isMutable %}set { concrete.{{p.name}} = newValue }{% endif %}
    }
    {% endfor %}
}

/**
 Type-erased `{{type.name}}`
 */
public final class Any{{type.name}}<{{ type.annotations.TypeErase }}>: {{type.name}} {
    private let box: _Any{{type.name}}Base<{{ type.annotations.TypeErase }}>

    /**
     Default initializer for `Any{{type.name}}`

     - Parameter concrete: Concrete type that implements `{{type.name}}`
    */
    public init<Concrete: {{type.name}}>(_ concrete: Concrete) where Concrete.{{ type.annotations.TypeErase }} == {{ type.annotations.TypeErase }} {
        self.box = _Any{{type.name}}Box(concrete)
    }

    {% for m in type.methods|!definedInExtension %}
    /**
     Proxy method for `{{type.name}}.{{m.selectorName}}`
     */
    public func {{m.name}} -> {{m.returnTypeName}} {
        return box.{{m.callName}}({% for p in m.parameters %}{% if p.argumentLabel != nil %}{{p.argumentLabel}}: {% endif %}{{p.name}}{% if not forloop.last %},{% endif %}{% endfor %})
    }

    {% endfor %}
    {% for p in type.variables %}
    /**
     Proxy property for `{{type.name}}.{{p.name}}`
     */
    public var {{p.name}}: {{p.typeName}} {
        get { return box.{{p.name}} }
        {% if p.isMutable %}set { box.{{p.name}} = newValue }{% endif %}
    }
    {% endfor %}
}
{% endfor %}
