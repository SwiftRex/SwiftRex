/**
 ðŸ•¹ `EventProtocol` represents an event, usually created in response to an user's input, such as tap, swipe, pinch, scroll.

 An `EventProtocol` is usually a request from your user to which the app should respond, for example the tab bar icon was tapped, a menu item was selected, a swipe gesture from left to right on cell number `3` or a new character was pressed in a search bar. Other events can be generated by other actors, such as timers or `CoreLocation` updates, but let's skip that for a moment and thing exclusively about the main actor of most use cases: the user. Because the user interaction is given mainly throughout an `UIViewController`, we should agree that View Controllers will create and dispatch most events to the `Store`, where the `Middleware` pipeline will handle it to decide whether or not act on each.

 `EventProtocol` is a marker protocol and usually you want to keep events as tiny value-type structures: struct or enum. Having associated values is completely optional, but please keep in mind that you should pass as minimum information as necessary, and avoid passing value that's already in the state.

 For example, if there's a table view showing a list of movies, for each cell you may have a "Mark as Watched" (or Unwatched) button and a "Show Details" button, while the navigation bar has a button to mark all as watched. In that case, event enum could be:

 ```
 enum MovieListEvent: EventProtocol {
     case didTapWatchToggle(rowIndex: Int)
     case didTapDetailsButton(rowIndex: Int)
     case didTapMarkAllAsWatched
 }
 ```

 Because your `State` already knows whether or not the movie was watched, you just need to offer a single "toggle" event instead of two events for watch or unwatch, and also there's no need for an extra boolean parameter. Moreover, you could pass the `IndexPath.row` instead of `movieId` so your enum becomes essentially a generic control event and your cells don't have to maintain IDs or any other model information.
 */
public protocol EventProtocol { }
