#if !canImport(ObjectiveC)
import XCTest

extension PipelineMiddlewareRxSwiftTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PipelineMiddlewareRxSwiftTests = [
        ("testPipelineMiddlewareActionIgnore", testPipelineMiddlewareActionIgnore),
        ("testPipelineMiddlewareActionTransformPipeline", testPipelineMiddlewareActionTransformPipeline),
        ("testPipelineMiddlewareEventIgnore", testPipelineMiddlewareEventIgnore),
        ("testPipelineMiddlewareEventTransformPipeline", testPipelineMiddlewareEventTransformPipeline),
    ]
}

extension PublisherTypeBridgeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PublisherTypeBridgeTests = [
        ("testObservableToPublisherTypeOnError", testObservableToPublisherTypeOnError),
        ("testObservableToPublisherTypeOnValue", testObservableToPublisherTypeOnValue),
        ("testPublisherTypeToObservableOnError", testPublisherTypeToObservableOnError),
        ("testPublisherTypeToObservableOnValue", testPublisherTypeToObservableOnValue),
    ]
}

extension ReplayLastSubjectTypeBridgeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReplayLastSubjectTypeBridgeTests = [
        ("testBehaviorSubjectToReplayLastSubjectTypeOnValue", testBehaviorSubjectToReplayLastSubjectTypeOnValue),
        ("testDefaultReplayLastSubjectTypeMutate", testDefaultReplayLastSubjectTypeMutate),
        ("testDefaultReplayLastSubjectTypeOnValue", testDefaultReplayLastSubjectTypeOnValue),
    ]
}

extension SubjectTypeBridgeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubjectTypeBridgeTests = [
        ("testDefaultSubjectTypeOnError", testDefaultSubjectTypeOnError),
        ("testDefaultSubjectTypeOnValue", testDefaultSubjectTypeOnValue),
        ("testPublishSubjectToSubjectTypeOnError", testPublishSubjectToSubjectTypeOnError),
        ("testPublishSubjectToSubjectTypeOnValue", testPublishSubjectToSubjectTypeOnValue),
        ("testUnfailablePublishSubjectToSubjectTypeOnValue", testUnfailablePublishSubjectToSubjectTypeOnValue),
    ]
}

extension SubscriberTypeBridgeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubscriberTypeBridgeTests = [
        ("testObserverToSubscriberTypeOnError", testObserverToSubscriberTypeOnError),
        ("testObserverToSubscriberTypeOnValue", testObserverToSubscriberTypeOnValue),
        ("testSubscriberTypeToObserverOnError", testSubscriberTypeToObserverOnError),
        ("testSubscriberTypeToObserverOnValue", testSubscriberTypeToObserverOnValue),
    ]
}

extension SubscriptionBridgeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubscriptionBridgeTests = [
        ("testDisposableToSubscriptionToDisposableDispose", testDisposableToSubscriptionToDisposableDispose),
        ("testDisposableToSubscriptionUnsubscribe", testDisposableToSubscriptionUnsubscribe),
        ("testSubscriptionCollectionAppend", testSubscriptionCollectionAppend),
        ("testSubscriptionToDisposableDispose", testSubscriptionToDisposableDispose),
        ("testSubscriptionToDisposableToSubscriptionUnsubscribe", testSubscriptionToDisposableToSubscriptionUnsubscribe),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(PipelineMiddlewareRxSwiftTests.__allTests__PipelineMiddlewareRxSwiftTests),
        testCase(PublisherTypeBridgeTests.__allTests__PublisherTypeBridgeTests),
        testCase(ReplayLastSubjectTypeBridgeTests.__allTests__ReplayLastSubjectTypeBridgeTests),
        testCase(SubjectTypeBridgeTests.__allTests__SubjectTypeBridgeTests),
        testCase(SubscriberTypeBridgeTests.__allTests__SubscriberTypeBridgeTests),
        testCase(SubscriptionBridgeTests.__allTests__SubscriptionBridgeTests),
    ]
}
#endif
