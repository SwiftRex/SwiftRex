{"Typealiases.html#/s:8SwiftRex15StoreProjectiona":{"name":"StoreProjection","abstract":"<p>Not necessarily a store implementation means that this entity holds the source-of-truth of an app. The source-of-truth"},"Typealiases.html#/s:8SwiftRex24UnfailableSubscriberTypea":{"name":"UnfailableSubscriberType","abstract":"<p>Abstraction over subscriber/observer types from reactive frameworks."},"Typealiases.html#/s:8SwiftRex23UnfailablePublisherTypea":{"name":"UnfailablePublisherType","abstract":"<p>Abstraction over publisher/observable/signal producer types from reactive frameworks."},"Typealiases.html#/s:8SwiftRex17UnfailableSubjecta":{"name":"UnfailableSubject","abstract":"<p>Abstraction over passthrough subject types (<code>PassthroughSubject</code>, <code>PublishSubject</code>, <code>Signal</code>) from reactive frameworks."},"Typealiases.html#/s:8SwiftRex31UnfailableReplayLastSubjectTypea":{"name":"UnfailableReplayLastSubjectType","abstract":"<p>Abstraction over subject types able to keep the last object (<code>CurrentValueSubject</code>, <code>BehaviorSubject</code>, <code>MutableProperty</code>, <code>Variable</code>) from"},"Typealiases.html#/s:8SwiftRex8GetStatea":{"name":"GetState","abstract":"<p>Zero-argument function that returns the current state. <br/>"},"Typealiases.html#/s:8SwiftRex14ReduceFunctiona":{"name":"ReduceFunction","abstract":"<p>State reducer: takes current state and an action, computes the new state. <br/>"},"Typealiases.html#/s:8SwiftRex21MutableReduceFunctiona":{"name":"MutableReduceFunction","abstract":"<p>State reducer: takes inout version of the current state and an action, computes the new state changing the provided mutable state. <br/>"},"Structs/LiftMiddleware.html#/s:8SwiftRex10MiddlewareP15InputActionTypeQa":{"name":"InputActionType","parent_name":"LiftMiddleware"},"Structs/LiftMiddleware.html#/s:8SwiftRex10MiddlewareP16OutputActionTypeQa":{"name":"OutputActionType","parent_name":"LiftMiddleware"},"Structs/LiftMiddleware.html#/s:8SwiftRex10MiddlewareP9StateTypeQa":{"name":"StateType","parent_name":"LiftMiddleware"},"Structs/LiftMiddleware.html#/s:8SwiftRex10MiddlewareP14receiveContext8getState6outputy0G4TypeQzyc_AA16AnyActionHandlerVy06OutputkI0QzGtF":{"name":"receiveContext(getState:output:)","parent_name":"LiftMiddleware"},"Structs/LiftMiddleware.html#/s:8SwiftRex14LiftMiddlewareV6handle6action4from12afterReduceryx_AA12ActionSourceVAA05AfterI0VztF":{"name":"handle(action:from:afterReducer:)","abstract":"<p>Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch","parent_name":"LiftMiddleware"},"Structs/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareVACyxq_q0_Gycfc":{"name":"init()","abstract":"<p>Default initializer for <code>IdentityMiddleware</code></p>","parent_name":"IdentityMiddleware"},"Structs/IdentityMiddleware.html#/s:8SwiftRex10MiddlewareP14receiveContext8getState6outputy0G4TypeQzyc_AA16AnyActionHandlerVy06OutputkI0QzGtF":{"name":"receiveContext(getState:output:)","parent_name":"IdentityMiddleware"},"Structs/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareV6handle6action4from12afterReduceryx_AA12ActionSourceVAA05AfterI0VztF":{"name":"handle(action:from:afterReducer:)","abstract":"<p>Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch","parent_name":"IdentityMiddleware"},"Structs/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareV4lift11inputAction06outputG05stateACyqd__qd_0_qd_1_GxSgqd__c_qd_0_q_cq0_qd_1_ctr1_lF":{"name":"lift(inputAction:outputAction:state:)","abstract":"<p>Undocumented</p>","parent_name":"IdentityMiddleware"},"Structs/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareV4lift12outputAction5stateACyxqd__qd_0_Gqd__q_c_q0_qd_0_ctr0_lF":{"name":"lift(outputAction:state:)","abstract":"<p>Undocumented</p>","parent_name":"IdentityMiddleware"},"Structs/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareV4lift11inputAction5stateACyqd__q_qd_0_GxSgqd__c_q0_qd_0_ctr0_lF":{"name":"lift(inputAction:state:)","abstract":"<p>Undocumented</p>","parent_name":"IdentityMiddleware"},"Structs/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareV4lift11inputAction06outputG0ACyqd__qd_0_q0_GxSgqd__c_qd_0_q_ctr0_lF":{"name":"lift(inputAction:outputAction:)","abstract":"<p>Undocumented</p>","parent_name":"IdentityMiddleware"},"Structs/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareV4lift11inputActionACyqd__q_q0_GxSgqd__c_tlF":{"name":"lift(inputAction:)","abstract":"<p>Undocumented</p>","parent_name":"IdentityMiddleware"},"Structs/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareV4lift12outputActionACyxqd__q0_Gqd__q_c_tlF":{"name":"lift(outputAction:)","abstract":"<p>Undocumented</p>","parent_name":"IdentityMiddleware"},"Structs/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareV4lift5stateACyxq_qd__Gq0_qd__c_tlF":{"name":"lift(state:)","abstract":"<p>Undocumented</p>","parent_name":"IdentityMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareVACyxq_q0_Gycfc":{"name":"init()","abstract":"<p>Default initializer for <code>ComposedMiddleware</code>, use this only if you don&rsquo;t like custom operators, otherwise create a <code>ComposedMiddleware</code> by composing two or more middlewares using the diamond operator, as shown below:</p>","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareV6append10middlewareyqd___t15InputActionTypeQyd__Rsz06OutputhI0Qyd__Rs_05StateI0Qyd__Rs0_AA0D0Rd__lF":{"name":"append(middleware:)","abstract":"<p>Appends a new middleware to end of the composition (inner chain). Use this only if you don&rsquo;t like custom operators, otherwise create a <code>ComposedMiddleware</code> append more middlewares to the composition by using the diamond operator, as shown below:</p>","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex10MiddlewareP14receiveContext8getState6outputy0G4TypeQzyc_AA16AnyActionHandlerVy06OutputkI0QzGtF":{"name":"receiveContext(getState:output:)","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareV6handle6action4from12afterReduceryx_AA12ActionSourceVAA05AfterI0VztF":{"name":"handle(action:from:afterReducer:)","abstract":"<p>Handles the incoming actions. The <code>ComposedMiddleware</code> will forward each action to all its internal middlewares, in","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareV4lift11inputAction06outputG05stateACyqd__qd_0_qd_1_GxSgqd__c_qd_0_q_cq0_qd_1_ctr1_lF":{"name":"lift(inputAction:outputAction:state:)","abstract":"<p>Undocumented</p>","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareV4lift12outputAction5stateACyxqd__qd_0_Gqd__q_c_q0_qd_0_ctr0_lF":{"name":"lift(outputAction:state:)","abstract":"<p>Undocumented</p>","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareV4lift11inputAction5stateACyqd__q_qd_0_GxSgqd__c_q0_qd_0_ctr0_lF":{"name":"lift(inputAction:state:)","abstract":"<p>Undocumented</p>","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareV4lift11inputAction06outputG0ACyqd__qd_0_q0_GxSgqd__c_qd_0_q_ctr0_lF":{"name":"lift(inputAction:outputAction:)","abstract":"<p>Undocumented</p>","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareV4lift11inputActionACyqd__q_q0_GxSgqd__c_tlF":{"name":"lift(inputAction:)","abstract":"<p>Undocumented</p>","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareV4lift12outputActionACyxqd__q0_Gqd__q_c_tlF":{"name":"lift(outputAction:)","abstract":"<p>Undocumented</p>","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareV4lift5stateACyxq_qd__Gq0_qd__c_tlF":{"name":"lift(state:)","abstract":"<p>Undocumented</p>","parent_name":"ComposedMiddleware"},"Structs/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareV8identityACyxq_q0_GvpZ":{"name":"identity","abstract":"<p>Composed middleware identity is an empty composed middleware collection</p>","parent_name":"ComposedMiddleware"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV9publisherAA09PublisherF0Vyxq_Gvp":{"name":"publisher","abstract":"<p>Upstream publisher that feeds data into this subject</p>","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV10subscriberAA010SubscriberF0Vyxq_Gvp":{"name":"subscriber","abstract":"<p>Downstream subscriber that subscribes to this subject and will receive events from it</p>","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV5valuexycvp":{"name":"value","abstract":"<p>Reads the most recent element emitted by this subject. This subject can be seen as a variable in stateful programming style, it holds one","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV9publisher10subscriber5valueACyxq_GAA09PublisherF0Vyxq_G_AA010SubscriberF0Vyxq_Gxyctcfc":{"name":"init(publisher:subscriber:value:)","abstract":"<p>Creates an abstraction over subject types able to keep the last object (<code>CurrentValueSubject</code>, <code>BehaviorSubject</code>, <code>MutableProperty</code>,","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV6mutateyqd__qd__xzXElF":{"name":"mutate(_:)","abstract":"<p>Atomically mutate this subject&rsquo;s value in a closure where you can read and write the current element value</p>","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV6mutate4when6actionqd__Sbqd__c_qd__xzXEtlF":{"name":"mutate(when:action:)","abstract":"<p>Atomically mutate this subject&rsquo;s value in a closure where you can read and write the current element value","parent_name":"ReplayLastSubjectType"},"Structs/SubjectType.html#/s:8SwiftRex11SubjectTypeV9publisherAA09PublisherD0Vyxq_Gvp":{"name":"publisher","abstract":"<p>Upstream publisher that feeds events into this subject</p>","parent_name":"SubjectType"},"Structs/SubjectType.html#/s:8SwiftRex11SubjectTypeV10subscriberAA010SubscriberD0Vyxq_Gvp":{"name":"subscriber","abstract":"<p>Downstream subscriber that subscribes to this subject and will receive events from it</p>","parent_name":"SubjectType"},"Structs/SubjectType.html#/s:8SwiftRex11SubjectTypeV9publisher10subscriberACyxq_GAA09PublisherD0Vyxq_G_AA010SubscriberD0Vyxq_Gtcfc":{"name":"init(publisher:subscriber:)","abstract":"<p>Creates an abstraction over passthrough subject types (<code>PassthroughSubject</code>, <code>PublishSubject</code>, <code>Signal</code>) from reactive frameworks.</p>","parent_name":"SubjectType"},"Structs/PublisherType.html#/s:8SwiftRex13PublisherTypeV9subscribeyAA012SubscriptionD0_pAA010SubscriberD0Vyxq_Gcvp":{"name":"subscribe","abstract":"<p>Undocumented</p>","parent_name":"PublisherType"},"Structs/PublisherType.html#/s:8SwiftRex13PublisherTypeV9subscribeACyxq_GAA012SubscriptionD0_pAA010SubscriberD0Vyxq_Gc_tcfc":{"name":"init(subscribe:)","abstract":"<p>Undocumented</p>","parent_name":"PublisherType"},"Structs/PublisherType.html#/s:8SwiftRex13PublisherTypeV15assertNoFailureACyxs5NeverOGyF":{"name":"assertNoFailure()","abstract":"<p>Transforms any publishers into a Unfailable publisher with the same element type. After calling this method, a publisher will be derived","parent_name":"PublisherType"},"Structs/PublisherType.html#/s:8SwiftRex13PublisherTypeV3mapyACyqd__q_Gqd__xclF":{"name":"map(_:)","abstract":"<p>Maps elements emitted by the upstream into a new element type, given by the transform function provided by you</p>","parent_name":"PublisherType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV7onValueyyxcvp":{"name":"onValue","abstract":"<p>Closure to handle new values received</p>","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV11onCompletedyyq_Sgcvp":{"name":"onCompleted","abstract":"<p>Closure to handle completion, which has an optional error in case the completion happened due to an error being emitted</p>","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV11onSubscribeyyAA012SubscriptionD0_pcvp":{"name":"onSubscribe","abstract":"<p>Closure to handle subscription event</p>","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV7onValue0E9Completed0E9SubscribeACyxq_GyxcSg_yq_SgcSgyAA012SubscriptionD0_pcSgtcfc":{"name":"init(onValue:onCompleted:onSubscribe:)","abstract":"<p>Protocol-witness of a subscriber. Configure the behaviour of this wrapper from a concrete implementation from your favourite reactive","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV15assertNoFailureACyxs5NeverOGyF":{"name":"assertNoFailure()","abstract":"<p>Transforms any subscriber into a Unfailable subscriber with the same element type. After calling this method, a subscriber will be derived","parent_name":"SubscriberType"},"Structs/ElementIndexAction.html#/s:8SwiftRex18ElementIndexActionV6actionq_vp":{"name":"action","abstract":"<p>Undocumented</p>","parent_name":"ElementIndexAction"},"Structs/ElementIndexAction.html#/s:8SwiftRex18ElementIndexActionV5index6actionACyxq_Gx_q_tcfc":{"name":"init(index:action:)","abstract":"<p>Undocumented</p>","parent_name":"ElementIndexAction"},"Structs/ElementIDAction.html#/s:s12IdentifiableP2id2IDQzvp":{"name":"id","parent_name":"ElementIDAction"},"Structs/ElementIDAction.html#/s:8SwiftRex15ElementIDActionV6actionq_vp":{"name":"action","abstract":"<p>Undocumented</p>","parent_name":"ElementIDAction"},"Structs/ElementIDAction.html#/s:8SwiftRex15ElementIDActionV2id6actionACyxq_Gx_q_tcfc":{"name":"init(id:action:)","abstract":"<p>Undocumented</p>","parent_name":"ElementIDAction"},"Structs/MiddlewareReader.html#/s:8SwiftRex16MiddlewareReaderV6injectyq_xcvp":{"name":"inject","abstract":"<p>An initializer function that, given the dependencies in the Middleware&rsquo;s init, will give the Middleware instance","parent_name":"MiddlewareReader"},"Structs/MiddlewareReader.html#/s:8SwiftRex16MiddlewareReaderV6injectACyxq_Gq_xc_tcfc":{"name":"init(inject:)","abstract":"<p>Allows to define a middleware initializer and store this initializer function until we have the dependencies to call it.","parent_name":"MiddlewareReader"},"Structs/ReduxPipelineWrapper.html#/s:8SwiftRex20ReduxPipelineWrapperV10ActionTypea":{"name":"ActionType","abstract":"<p>Undocumented</p>","parent_name":"ReduxPipelineWrapper"},"Structs/ReduxPipelineWrapper.html#/s:8SwiftRex20ReduxPipelineWrapperV9StateTypea":{"name":"StateType","abstract":"<p>Undocumented</p>","parent_name":"ReduxPipelineWrapper"},"Structs/ReduxPipelineWrapper.html#/s:8SwiftRex20ReduxPipelineWrapperV5state7reducer10middleware10emitsValueACyxGAA21ReplayLastSubjectTypeVy05StateN0Qzs5NeverOG_AA7ReducerVy011InputActionN0QzALGxAA010ShouldEmitJ0OyALGtcfc":{"name":"init(state:reducer:middleware:emitsValue:)","abstract":"<p>Undocumented</p>","parent_name":"ReduxPipelineWrapper"},"Structs/ReduxPipelineWrapper.html#/s:8SwiftRex13ActionHandlerP8dispatch_4fromy0C4TypeQz_AA0C6SourceVtF":{"name":"dispatch(_:from:)","parent_name":"ReduxPipelineWrapper"},"Structs/ReduxPipelineWrapper.html#/s:8SwiftRex20ReduxPipelineWrapperVAASQ9StateTypeRpzrlE5state7reducer10middlewareACyxGAA017ReplayLastSubjectG0VyAEs5NeverOG_AA7ReducerVy011InputActionG0QzAEGxtcfc":{"name":"init(state:reducer:middleware:)","abstract":"<p>Undocumented</p>","parent_name":"ReduxPipelineWrapper"},"Structs/AnyStoreType.html#/s:8SwiftRex12AnyStoreTypeVyACyxq_Gqd__c06ActionE0Qyd__Rsz05StateE0Qyd__Rs_AA0dE0Rd__lufc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"AnyStoreType"},"Structs/AnyStoreType.html#/s:8SwiftRex12AnyStoreTypeV6action5stateACyxq_Gyx_AA12ActionSourceVtc_AA09PublisherE0Vyq_s5NeverOGtcfc":{"name":"init(action:state:)","abstract":"<p>Undocumented</p>","parent_name":"AnyStoreType"},"Structs/AnyStoreType.html#/s:8SwiftRex13ActionHandlerP8dispatch_4fromy0C4TypeQz_AA0C6SourceVtF":{"name":"dispatch(_:from:)","parent_name":"AnyStoreType"},"Structs/AnyStoreType.html#/s:8SwiftRex13StateProviderP14statePublisherAA0F4TypeVy0cG0Qzs5NeverOGvp":{"name":"statePublisher","parent_name":"AnyStoreType"},"Structs/AnyStateProvider.html#/s:8SwiftRex16AnyStateProviderVyACyxGqd__c0D4TypeQyd__RszAA0dE0Rd__lufc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"AnyStateProvider"},"Structs/AnyStateProvider.html#/s:8SwiftRex16AnyStateProviderVyACyxGAA13PublisherTypeVyxs5NeverOGcfc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"AnyStateProvider"},"Structs/AnyStateProvider.html#/s:8SwiftRex13StateProviderP14statePublisherAA0F4TypeVy0cG0Qzs5NeverOGvp":{"name":"statePublisher","parent_name":"AnyStateProvider"},"Structs/DispatchedAction.html#/s:8SwiftRex16DispatchedActionV6actionxvp":{"name":"action","abstract":"<p>The action to be handled by the store</p>","parent_name":"DispatchedAction"},"Structs/DispatchedAction.html#/s:8SwiftRex16DispatchedActionV10dispatcherAA0D6SourceVvp":{"name":"dispatcher","abstract":"<p>The source of this action</p>","parent_name":"DispatchedAction"},"Structs/DispatchedAction.html#/s:8SwiftRex16DispatchedActionV_10dispatcherACyxGx_AA0D6SourceVtcfc":{"name":"init(_:dispatcher:)","abstract":"<p>Init <code>DispatchedAction</code> by providing the action and the dispatcher explicitly.</p>","parent_name":"DispatchedAction"},"Structs/DispatchedAction.html#/s:8SwiftRex16DispatchedActionV_4file8function4line4infoACyxGx_S2SSuSSSgtcfc":{"name":"init(_:file:function:line:info:)","abstract":"<p>Init <code>DispatchedAction</code> by providing the action and the components pointing to the source of this action, such as file, function and line.","parent_name":"DispatchedAction"},"Structs/DispatchedAction.html#/s:8SwiftRex16DispatchedActionV3mapyACyqd__Gqd__xXElF":{"name":"map(_:)","abstract":"<p>Transforms an action while keeping the dispatcher intact</p>","parent_name":"DispatchedAction"},"Structs/ActionSource.html#/s:8SwiftRex12ActionSourceV4fileSSvp":{"name":"file","abstract":"<p>File that created and dispatched the action</p>","parent_name":"ActionSource"},"Structs/ActionSource.html#/s:8SwiftRex12ActionSourceV8functionSSvp":{"name":"function","abstract":"<p>Function that created and dispatched the action</p>","parent_name":"ActionSource"},"Structs/ActionSource.html#/s:8SwiftRex12ActionSourceV4lineSuvp":{"name":"line","abstract":"<p>Line in the file where the action was created and dispatched</p>","parent_name":"ActionSource"},"Structs/ActionSource.html#/s:8SwiftRex12ActionSourceV4infoSSSgvp":{"name":"info","abstract":"<p>Additional information about the moment where the action was dispatched. This is an optional String that can hold information useful for","parent_name":"ActionSource"},"Structs/ActionSource.html#/s:8SwiftRex12ActionSourceV4file8function4line4infoACSS_SSSuSSSgtcfc":{"name":"init(file:function:line:info:)","abstract":"<p>Creates a structure that holds information about the entity who created and dispatched the action.</p>","parent_name":"ActionSource"},"Structs/ActionSource.html#/s:8SwiftRex12ActionSourceV4here4file8function4line4infoACSS_SSSuSSSgtFZ":{"name":"here(file:function:line:info:)","abstract":"<p>Undocumented</p>","parent_name":"ActionSource"},"Structs/AnyActionHandler.html#/s:8SwiftRex16AnyActionHandlerVyACyxGqd__c0D4TypeQyd__RszAA0dE0Rd__lufc":{"name":"init(_:)","abstract":"<p>Erases the provided <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ActionHandler.html\">ActionHandler</a></code> by using its inner methods from this wrapper</p>","parent_name":"AnyActionHandler"},"Structs/AnyActionHandler.html#/s:8SwiftRex16AnyActionHandlerVyACyxGyx_AA0D6SourceVtccfc":{"name":"init(_:)","abstract":"<p>Erases the any type that implements the <code>dispatch</code> function to act as a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ActionHandler.html\">ActionHandler</a></code></p>","parent_name":"AnyActionHandler"},"Structs/AnyActionHandler.html#/s:8SwiftRex16AnyActionHandlerV8dispatch_4fromyx_AA0D6SourceVtF":{"name":"dispatch(_:from:)","abstract":"<p>The function that allows Views, ViewControllers, Presenters to dispatch actions to the store.","parent_name":"AnyActionHandler"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV6reduceyyx_q_ztcvp":{"name":"reduce","abstract":"<p>Execute the wrapped reduce function. You must provide the parameters <code>action: ActionType</code> (the action to be","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerVyACyxq_Gq_x_q_tccfc":{"name":"init(_:)","abstract":"<p>Reducer initializer takes only the underlying function <code>(ActionType, StateType) -&gt; StateType</code> that is the reducer","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV6reduceyACyxq_Gyx_q_ztcFZ":{"name":"reduce(_:)","abstract":"<p>Reducer initializer takes only the underlying function <code>(ActionType, inout StateType) -&gt; Void</code> that is the reducer","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV16liftToCollection6action05stateF010identifierACyqd__qd_0_Gs7KeyPathCyqd__AA15ElementIDActionVyqd_2_xGSgG_s08WritablejK0Cyqd_0_qd_1_GAJyq_qd_2_Gt0L0Qyd_1_Rs_SMRd_1_SHRd_2_r2_lF":{"name":"liftToCollection(action:stateCollection:identifier:)","abstract":"<p>Undocumented</p>","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV16liftToCollection6action05stateF0ACyqd__qd_0_Gs7KeyPathCyqd__AA18ElementIndexActionVy0L0Qyd_1_xGSgG_s08WritableiJ0Cyqd_0_qd_1_Gt0K0Qyd_1_Rs_SMRd_1_r1_lF":{"name":"liftToCollection(action:stateCollection:)","abstract":"<p>Undocumented</p>","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV8identityACyxq_GvpZ":{"name":"identity","abstract":"<p>Neutral monoidal container. Composing any monoid with an <code>identity</code> monoid should result in a function unchanged,","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV2lgoiyACyxq_GAE_AEtFZ":{"name":"<>(_:_:)","abstract":"<p>Monoid Append operation. Allows to compose two reducers into one, keeping in mind that the order of the composition","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV4lift12actionGetter05stateF00G6SetterACyqd__qd_0_GxSgqd__c_q_qd_0_cyqd_0_z_q_tctr0_lF":{"name":"lift(actionGetter:stateGetter:stateSetter:)","abstract":"<p>A type-lifting method. The global state of your app is <em>Whole</em>, and the <code>Reducer</code> handles <em>Part</em>, that is a","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV4lift6action5stateACyqd__qd_0_Gs7KeyPathCyqd__xSgG_s08WritablegH0Cyqd_0_q_Gtr0_lF":{"name":"lift(action:state:)","abstract":"<p>A type-lifting method. The global state of your app is <em>Whole</em>, and the <code>Reducer</code> handles <em>Part</em>, that is a","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV4lift5stateACyxqd__Gs15WritableKeyPathCyqd__q_G_tlF":{"name":"lift(state:)","abstract":"<p>A type-lifting method. The global state of your app is <em>Whole</em>, and the <code>Reducer</code> handles <em>Part</em>, that is a","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV4lift6actionACyqd__q_Gs7KeyPathCyqd__xSgG_tlF":{"name":"lift(action:)","abstract":"<p>A type-lifting method. The global state of your app is <em>Whole</em>, and the <code>Reducer</code> handles <em>Part</em>, that is a","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerVAAs12IdentifiableR_rlE16liftToCollection6action05stateG0ACyqd__qd_0_Gs7KeyPathCyqd__AA15ElementIDActionVy2IDQy_xGSgG_s08WritablejK0Cyqd_0_qd_1_Gt0L0Qyd_1_Rs_SMRd_1_r1_lF":{"name":"liftToCollection(action:stateCollection:)","abstract":"<p>Undocumented</p>","parent_name":"Reducer"},"Structs/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareV14receiveContext6handleACyxq_q0_Gyq0_yc_AA0C13ActionHandlerVyq_Gtc_yx_AA0H6SourceVAA12AfterReducerVztctcfc":{"name":"init(receiveContext:handle:)","abstract":"<p>Undocumented</p>","parent_name":"AnyMiddleware"},"Structs/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareVyACyxq_q0_Gqd__c15InputActionTypeQyd__Rsz06OutputfG0Qyd__Rs_05StateG0Qyd__Rs0_AA0D0Rd__lufc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"AnyMiddleware"},"Structs/AnyMiddleware.html#/s:8SwiftRex10MiddlewareP14receiveContext8getState6outputy0G4TypeQzyc_AA16AnyActionHandlerVy06OutputkI0QzGtF":{"name":"receiveContext(getState:output:)","parent_name":"AnyMiddleware"},"Structs/AnyMiddleware.html#/s:8SwiftRex10MiddlewareP6handle6action4from12afterReducery15InputActionTypeQz_AA0J6SourceVAA05AfterH0VztF":{"name":"handle(action:from:afterReducer:)","parent_name":"AnyMiddleware"},"Structs/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareV4lift11inputAction06outputG05stateACyqd__qd_0_qd_1_GxSgqd__c_qd_0_q_cq0_qd_1_ctr1_lF":{"name":"lift(inputAction:outputAction:state:)","abstract":"<p>Undocumented</p>","parent_name":"AnyMiddleware"},"Structs/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareV4lift12outputAction5stateACyxqd__qd_0_Gqd__q_c_q0_qd_0_ctr0_lF":{"name":"lift(outputAction:state:)","abstract":"<p>Undocumented</p>","parent_name":"AnyMiddleware"},"Structs/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareV4lift11inputAction5stateACyqd__q_qd_0_GxSgqd__c_q0_qd_0_ctr0_lF":{"name":"lift(inputAction:state:)","abstract":"<p>Undocumented</p>","parent_name":"AnyMiddleware"},"Structs/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareV4lift11inputAction06outputG0ACyqd__qd_0_q0_GxSgqd__c_qd_0_q_ctr0_lF":{"name":"lift(inputAction:outputAction:)","abstract":"<p>Undocumented</p>","parent_name":"AnyMiddleware"},"Structs/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareV4lift11inputActionACyqd__q_q0_GxSgqd__c_tlF":{"name":"lift(inputAction:)","abstract":"<p>Undocumented</p>","parent_name":"AnyMiddleware"},"Structs/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareV4lift12outputActionACyxqd__q0_Gqd__q_c_tlF":{"name":"lift(outputAction:)","abstract":"<p>Undocumented</p>","parent_name":"AnyMiddleware"},"Structs/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareV4lift5stateACyxq_qd__Gq0_qd__c_tlF":{"name":"lift(state:)","abstract":"<p>Undocumented</p>","parent_name":"AnyMiddleware"},"Structs/AfterReducer.html#/s:8SwiftRex12AfterReducerV8identityACvpZ":{"name":"identity","abstract":"<p>The identity of an <code>AfterReducer</code> is the static instance <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/AfterReducer.html#/s:8SwiftRex12AfterReducerV9doNothingACyFZ\">doNothing()</a></code>, that contains an empty closure for no-op.","parent_name":"AfterReducer"},"Structs/AfterReducer.html#/s:8SwiftRex12AfterReducerV2doyACyycFZ":{"name":"do(_:)","abstract":"<p>Schedules some task to be executed right after Reducer chain has finished and new state is published</p>","parent_name":"AfterReducer"},"Structs/AfterReducer.html#/s:8SwiftRex12AfterReducerV9doNothingACyFZ":{"name":"doNothing()","abstract":"<p>The identity of an <code>AfterReducer</code> is the static instance <code>doNothing()</code>, that contains an empty closure for no-op.","parent_name":"AfterReducer"},"Structs/AfterReducer.html":{"name":"AfterReducer","abstract":"<p>Wraps a closure that will be called after the Reducer pipeline has changed the state with the current action."},"Structs/AnyMiddleware.html":{"name":"AnyMiddleware","abstract":"<p>Erases the protocol <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code>. Please check its documentation for more information.</p>"},"Structs/Reducer.html":{"name":"Reducer","abstract":"<p>⚙ <code>Reducer</code> is a pure function wrapped in a monoid container, that takes an action and the current state to calculate"},"Structs/AnyActionHandler.html":{"name":"AnyActionHandler","abstract":"<p><code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ActionHandler.html\">ActionHandler</a></code> defines a protocol for entities able to handle actions - defined by the associated type <code>ActionType</code>"},"Structs/ActionSource.html":{"name":"ActionSource","abstract":"<p>Representation of the entity responsible for creating and dispatching the action, including information useful for logging, debugging, analytics"},"Structs/DispatchedAction.html":{"name":"DispatchedAction","abstract":"<p>Wraps an action and the information about its dispatcher. It can be used when reactive pipelines want to enforce that the result is an action"},"Structs/AnyStateProvider.html":{"name":"AnyStateProvider","abstract":"<p><code>AnyStateProvider</code> erases the protocol <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/StateProvider.html\">StateProvider</a></code>, which defines a entities able to offer state publishers (Combine Publisher, RxSwift"},"Structs/AnyStoreType.html":{"name":"AnyStoreType","abstract":"<p>Undocumented</p>"},"Structs/ReduxPipelineWrapper.html":{"name":"ReduxPipelineWrapper","abstract":"<p>Undocumented</p>"},"Structs/MiddlewareReader.html":{"name":"MiddlewareReader","abstract":"<p>A MiddlewareReader is a way to lazily inject dependencies into a Middleware. For example, you may want to compose multiple middlewares but from"},"Structs/ElementIDAction.html":{"name":"ElementIDAction","abstract":"<p>Undocumented</p>"},"Structs/ElementIndexAction.html":{"name":"ElementIndexAction","abstract":"<p>Undocumented</p>"},"Structs/SubscriberType.html":{"name":"SubscriberType","abstract":"<p>Abstraction over subscriber/observer types from reactive frameworks."},"Structs/PublisherType.html":{"name":"PublisherType","abstract":"<p>Abstraction over publisher/observable/signal producer types from reactive frameworks."},"Structs/SubjectType.html":{"name":"SubjectType","abstract":"<p>Abstraction over passthrough subject types (<code>PassthroughSubject</code>, <code>PublishSubject</code>, <code>Signal</code>) from reactive frameworks."},"Structs/ReplayLastSubjectType.html":{"name":"ReplayLastSubjectType","abstract":"<p>Abstraction over subject types able to keep the last object (<code>CurrentValueSubject</code>, <code>BehaviorSubject</code>, <code>MutableProperty</code>, <code>Variable</code>) from"},"Structs/ComposedMiddleware.html":{"name":"ComposedMiddleware","abstract":"<p>The <code>ComposedMiddleware</code> is a container of inner middlewares that are chained together in the order as they were composed. Whenever an <code>EventProtocol</code> or an <code>ActionProtocol</code> arrives to be handled by this <code>ComposedMiddleware</code>, it will delegate to its internal chain of middlewares.</p>"},"Structs/IdentityMiddleware.html":{"name":"IdentityMiddleware","abstract":"<p>The <code>IdentityMiddleware</code> won&rsquo;t do any operation, simply bypass actions through. It&rsquo;s meant to provide identity axiom"},"Structs/LiftMiddleware.html":{"name":"LiftMiddleware","abstract":"<p>This is a container that lifts a sub-state middleware to a global state middleware.</p>"},"Protocols/SubscriptionCollection.html#/s:8SwiftRex22SubscriptionCollectionP5store12subscriptionyAA0C4Type_p_tF":{"name":"store(subscription:)","abstract":"<p>Undocumented</p>","parent_name":"SubscriptionCollection"},"Protocols/SubscriptionType.html#/s:8SwiftRex16SubscriptionTypeP11unsubscribeyyF":{"name":"unsubscribe()","abstract":"<p>Stops the observation and clean up all resources</p>","parent_name":"SubscriptionType"},"Protocols/SubscriptionType.html#/s:8SwiftRex16SubscriptionTypePAAE9cancelled2byyqd__z_tAA0C10CollectionRd__lF":{"name":"cancelled(by:)","abstract":"<p>Allow to add a subscription to a subscription collection, which is an abstraction for <code>DisposeBag</code> or <code>Set&lt;AnyCancellable</code> depending on your","parent_name":"SubscriptionType"},"Protocols/SubscriptionType.html#/s:8SwiftRex16SubscriptionTypePAAE9cancelled2byyAA0C10Collection_pz_tF":{"name":"cancelled(by:)","abstract":"<p>Allow to add a subscription to a subscription collection, which is an abstraction for <code>DisposeBag</code> or <code>Set&lt;AnyCancellable</code> depending on your","parent_name":"SubscriptionType"},"Protocols/Monoid.html#/s:8SwiftRex6MonoidP8identityxvpZ":{"name":"identity","abstract":"<p>Neutral monoidal container. Composing any monoid with an identity monoid should result in a function unchanged, regardless if the empty element is on the left-hand side or the right-hand side.</p>","parent_name":"Monoid"},"Protocols/Semigroup.html#/s:8SwiftRex9SemigroupP2lgoiyxx_xtFZ":{"name":"<>(_:_:)","abstract":"<p>Semigroup combine operation</p>","parent_name":"Semigroup"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolP12DependenciesQa":{"name":"Dependencies","abstract":"<p>Dependencies to inject in the middleware. This is equivalent to the parameters in a middleware initializer, usually a tuple with multiple","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolP0C4TypeQa":{"name":"MiddlewareType","abstract":"<p>The resulting middleware after the dependencies are injected.","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolP6injecty0C4TypeQz12DependenciesQzcvp":{"name":"inject","abstract":"<p>An initializer function that, given the dependencies in the Middleware&rsquo;s init, will give the Middleware instance","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolP6injectx0C4TypeQz12DependenciesQzc_tcfc":{"name":"init(inject:)","abstract":"<p>Allows to define a middleware initializer and store this initializer function until we have the dependencies to call it.","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE2lgoiyAA0cD0Vy12DependenciesQzAA08ComposedC0Vy15InputActionTypeQyd__06OutputjK0Qyd__05StateK0Qyd__GGx_AFyAHqd__GtAA0C0Rd__0cK0_AKQZALRSAU_AMQZANRSAU_AOQZAPRSlFZ":{"name":"<>(_:_:)","abstract":"<p>Compose two Middlewares that are not officially Semigroups and not necessarily the same Middleware type, into a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ComposedMiddleware.html\">ComposedMiddleware</a></code> that","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE8identityAA0cD0Vy12DependenciesQzAA08IdentityC0Vy0C4Type_011InputActionI0QZAK_06OutputkI0QZAK_05StateI0QZGGvpZ":{"name":"identity","abstract":"<p>An identity MiddlewareReader ignores whatever Dependencies are given and simply return an identity Middleware. Composing any given middleware","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift11inputAction06outputH05state12dependenciesAA0cD0Vyqd__AA04LiftC0Vyqd_0_qd_1_qd_2_0C4TypeQzGGAM_05InputhM0QZSgqd_0_c_qd_1_AM_06OutputhM0QZcAM_05StateM0QZqd_2_c12DependenciesQzqd__ctr2_lF":{"name":"lift(inputAction:outputAction:state:dependencies:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift12outputAction5state12dependenciesAA0cD0Vyqd__AA04LiftC0Vy0C4Type_05InputhL0QZqd_0_qd_1_ALQzGGqd_0_AL_06OutputhL0QZc_AL_05StateL0QZqd_1_c12DependenciesQzqd__ctr1_lF":{"name":"lift(outputAction:state:dependencies:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift11inputAction5state12dependenciesAA0cD0Vyqd__AA04LiftC0Vyqd_0_0C4Type_06OutputhL0QZqd_1_ALQzGGAL_05InputhL0QZSgqd_0_c_AL_05StateL0QZqd_1_c12DependenciesQzqd__ctr1_lF":{"name":"lift(inputAction:state:dependencies:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift11inputAction06outputH012dependenciesAA0cD0Vyqd__AA04LiftC0Vyqd_0_qd_1_0C4Type_05StateL0QZALQzGGAL_05InputhL0QZSgqd_0_c_qd_1_AL_06OutputhL0QZc12DependenciesQzqd__ctr1_lF":{"name":"lift(inputAction:outputAction:dependencies:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift11inputAction06outputH05stateAA0cD0Vy12DependenciesQzAA04LiftC0Vyqd__qd_0_qd_1_0C4TypeQzGGAN_05InputhM0QZSgqd__c_qd_0_AN_06OutputhM0QZcAN_05StateM0QZqd_1_ctr1_lF":{"name":"lift(inputAction:outputAction:state:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift5state12dependenciesAA0cD0Vyqd__AA04LiftC0Vy0C4Type_011InputActionJ0QZAK_06OutputlJ0QZqd_0_AKQzGGAK_05StateJ0QZqd_0_c_12DependenciesQzqd__ctr0_lF":{"name":"lift(state:dependencies:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift12outputAction12dependenciesAA0cD0Vyqd__AA04LiftC0Vy0C4Type_05InputhK0QZqd_0_AK_05StateK0QZAKQzGGqd_0_AK_06OutputhK0QZc_12DependenciesQzqd__ctr0_lF":{"name":"lift(outputAction:dependencies:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift12outputAction5stateAA0cD0Vy12DependenciesQzAA04LiftC0Vy0C4Type_05InputhL0QZqd__qd_0_AMQzGGqd__AM_06OutputhL0QZc_AM_05StateL0QZqd_0_ctr0_lF":{"name":"lift(outputAction:state:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift11inputAction12dependenciesAA0cD0Vyqd__AA04LiftC0Vyqd_0_0C4Type_06OutputhK0QZAK_05StateK0QZAKQzGGAK_05InputhK0QZSgqd_0_c_12DependenciesQzqd__ctr0_lF":{"name":"lift(inputAction:dependencies:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift11inputAction5stateAA0cD0Vy12DependenciesQzAA04LiftC0Vyqd__0C4Type_06OutputhL0QZqd_0_AMQzGGAM_05InputhL0QZSgqd__c_AM_05StateL0QZqd_0_ctr0_lF":{"name":"lift(inputAction:state:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift11inputAction06outputH0AA0cD0Vy12DependenciesQzAA04LiftC0Vyqd__qd_0_0C4Type_05StateL0QZAMQzGGAM_05InputhL0QZSgqd__c_qd_0_AM_06OutputhL0QZctr0_lF":{"name":"lift(inputAction:outputAction:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift5stateAA0cD0Vy12DependenciesQzAA04LiftC0Vy0C4Type_011InputActionJ0QZAL_06OutputlJ0QZqd__ALQzGGAL_05StateJ0QZqd__c_tlF":{"name":"lift(state:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift12dependenciesAA0cD0Vyqd__0C4TypeQzG12DependenciesQzqd__c_tlF":{"name":"lift(dependencies:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift12outputActionAA0cD0Vy12DependenciesQzAA04LiftC0Vy0C4Type_05InputhK0QZqd__AL_05StateK0QZALQzGGqd__AL_06OutputhK0QZc_tlF":{"name":"lift(outputAction:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4lift11inputActionAA0cD0Vy12DependenciesQzAA04LiftC0Vyqd__0C4Type_06OutputhK0QZAL_05StateK0QZALQzGGAL_05InputhK0QZSgqd__c_tlF":{"name":"lift(inputAction:)","abstract":"<p>All you need to compose totally different middlewares. Using lift you can match all 4 parameters of a middleware and once they have common","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE03mapC0yAA0cD0Vy12DependenciesQzqd__Gqd__0C4TypeQzcAA0C0Rd__lF":{"name":"mapMiddleware(_:)","abstract":"<p>Maps the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> element that will eventually be produced upon dependency injection, and derives into a new <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code></p>","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE20contramapDependeciesyAA0cD0Vyqd__0C4TypeQzG12DependenciesQzqd__clF":{"name":"contramapDependecies(_:)","abstract":"<p>Maps the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolP12DependenciesQa\">Dependencies</a></code> element, which is the input environment of the calculation for a particular middleware, using a contravariant","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE5dimap09transformC0036extractOnlyDependenciesNeededForThisC0AA0cD0Vyqd_0_qd__Gqd__0C4TypeQzc_0J0Qzqd_0_ctAA0C0Rd__r0_lF":{"name":"dimap(transformMiddleware:extractOnlyDependenciesNeededForThisMiddleware:)","abstract":"<p>Maps the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> element that will eventually be produced upon dependency injection, and derives into a new <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code></p>","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE7flatMapyqd__qd__0C4TypeQzcAaBRd__12DependenciesQyd__AGRtzlF":{"name":"flatMap(_:)","abstract":"<p>Having a MiddlewareReader mapping that results in another MiddlewareReader that also depends on same environment, we can flatten up","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE4pureyx0C4TypeQzFZ":{"name":"pure(_:)","abstract":"<p>Wraps a pure function in a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/MiddlewareReader.html\">MiddlewareReader</a></code> container just for the sake of composition. Nothing is actually needed for the calculation and","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE3zip__4withAA0cD0Vy12DependenciesQyd__qd_1_Gqd___qd_0_qd_1_0C4TypeQyd___AKQyd_0_tctAaBRd__AaBRd_0_AA0C0Rd_1_AHQyd_0_AIRSr1_lFZ":{"name":"zip(_:_:with:)","abstract":"<p>Creates a MiddlewareReader that combines multiple readers into one, as long as they depend on same environment. Once this environment is","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE3zip___4withAA0cD0Vy12DependenciesQyd__qd_2_Gqd___qd_0_qd_1_qd_2_0C4TypeQyd___AKQyd_0_AKQyd_1_tctAaBRd__AaBRd_0_AaBRd_1_AA0C0Rd_2_AHQyd_0_AIRSAHQyd_1_APRSr2_lFZ":{"name":"zip(_:_:_:with:)","abstract":"<p>Creates a MiddlewareReader that combines multiple readers into one, as long as they depend on same environment. Once this environment is","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE3zip____4withAA0cD0Vy12DependenciesQyd__qd_3_Gqd___qd_0_qd_1_qd_2_qd_3_0C4TypeQyd___AKQyd_0_AKQyd_1_AKQyd_2_tctAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_AA0C0Rd_3_AHQyd_0_AIRSAHQyd_1_AQRSAHQyd_2_ARRSr3_lFZ":{"name":"zip(_:_:_:_:with:)","abstract":"<p>Creates a MiddlewareReader that combines multiple readers into one, as long as they depend on same environment. Once this environment is","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE3zip_____4withAA0cD0Vy12DependenciesQyd__qd_4_Gqd___qd_0_qd_1_qd_2_qd_3_qd_4_0C4TypeQyd___AKQyd_0_AKQyd_1_AKQyd_2_AKQyd_3_tctAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_AaBRd_3_AA0C0Rd_4_AHQyd_0_AIRSAHQyd_1_ARRSAHQyd_2_ASRSAHQyd_3_ATRSr4_lFZ":{"name":"zip(_:_:_:_:_:with:)","abstract":"<p>Creates a MiddlewareReader that combines multiple readers into one, as long as they depend on same environment. Once this environment is","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE3zip______4withAA0cD0Vy12DependenciesQyd__qd_5_Gqd___qd_0_qd_1_qd_2_qd_3_qd_4_qd_5_0C4TypeQyd___AKQyd_0_AKQyd_1_AKQyd_2_AKQyd_3_AKQyd_4_tctAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_AaBRd_3_AaBRd_4_AA0C0Rd_5_AHQyd_0_AIRSAHQyd_1_ASRSAHQyd_2_ATRSAHQyd_3_AURSAHQyd_4_AVRSr5_lFZ":{"name":"zip(_:_:_:_:_:_:with:)","abstract":"<p>Creates a MiddlewareReader that combines multiple readers into one, as long as they depend on same environment. Once this environment is","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE3zip_______4withAA0cD0Vy12DependenciesQyd__qd_6_Gqd___qd_0_qd_1_qd_2_qd_3_qd_4_qd_5_qd_6_0C4TypeQyd___AKQyd_0_AKQyd_1_AKQyd_2_AKQyd_3_AKQyd_4_AKQyd_5_tctAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_AaBRd_3_AaBRd_4_AaBRd_5_AA0C0Rd_6_AHQyd_0_AIRSAHQyd_1_ATRSAHQyd_2_AURSAHQyd_3_AVRSAHQyd_4_AWRSAHQyd_5_AXRSr6_lFZ":{"name":"zip(_:_:_:_:_:_:_:with:)","abstract":"<p>Creates a MiddlewareReader that combines multiple readers into one, as long as they depend on same environment. Once this environment is","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE3zip________4withAA0cD0Vy12DependenciesQyd__qd_7_Gqd___qd_0_qd_1_qd_2_qd_3_qd_4_qd_5_qd_6_qd_7_0C4TypeQyd___AKQyd_0_AKQyd_1_AKQyd_2_AKQyd_3_AKQyd_4_AKQyd_5_AKQyd_6_tctAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_AaBRd_3_AaBRd_4_AaBRd_5_AaBRd_6_AA0C0Rd_7_AHQyd_0_AIRSAHQyd_1_AURSAHQyd_2_AVRSAHQyd_3_AWRSAHQyd_4_AXRSAHQyd_5_AYRSAHQyd_6_AZRSr7_lFZ":{"name":"zip(_:_:_:_:_:_:_:_:with:)","abstract":"<p>Creates a MiddlewareReader that combines multiple readers into one, as long as they depend on same environment. Once this environment is","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE3zip_________4withAA0cD0Vy12DependenciesQyd__qd_8_Gqd___qd_0_qd_1_qd_2_qd_3_qd_4_qd_5_qd_6_qd_7_qd_8_0C4TypeQyd___AKQyd_0_AKQyd_1_AKQyd_2_AKQyd_3_AKQyd_4_AKQyd_5_AKQyd_6_AKQyd_7_tctAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_AaBRd_3_AaBRd_4_AaBRd_5_AaBRd_6_AaBRd_7_AA0C0Rd_8_AHQyd_0_AIRSAHQyd_1_AVRSAHQyd_2_AWRSAHQyd_3_AXRSAHQyd_4_AYRSAHQyd_5_AZRSAHQyd_6_A_RSAHQyd_7_A0_RSr8_lFZ":{"name":"zip(_:_:_:_:_:_:_:_:_:with:)","abstract":"<p>Creates a MiddlewareReader that combines multiple readers into one, as long as they depend on same environment. Once this environment is","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPAAE3zip__________4withAA0cD0Vy12DependenciesQyd__qd_9_Gqd___qd_0_qd_1_qd_2_qd_3_qd_4_qd_5_qd_6_qd_7_qd_8_qd_9_0C4TypeQyd___AKQyd_0_AKQyd_1_AKQyd_2_AKQyd_3_AKQyd_4_AKQyd_5_AKQyd_6_AKQyd_7_AKQyd_8_tctAaBRd__AaBRd_0_AaBRd_1_AaBRd_2_AaBRd_3_AaBRd_4_AaBRd_5_AaBRd_6_AaBRd_7_AaBRd_8_AA0C0Rd_9_AHQyd_0_AIRSAHQyd_1_AWRSAHQyd_2_AXRSAHQyd_3_AYRSAHQyd_4_AZRSAHQyd_5_A_RSAHQyd_6_A0_RSAHQyd_7_A1_RSAHQyd_8_A2_RSr9_lFZ":{"name":"zip(_:_:_:_:_:_:_:_:_:_:with:)","abstract":"<p>Creates a MiddlewareReader that combines multiple readers into one, as long as they depend on same environment. Once this environment is","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPA2A9Semigroup0C4TypeRpzrlE2lgoiyxx_xtFZ":{"name":"<>(_:_:)","abstract":"<p>Compose two Semigroup Middlewares into one, before even materializing them into real instances.</p>","parent_name":"MiddlewareReaderProtocol"},"Protocols/MiddlewareReaderProtocol.html#/s:8SwiftRex24MiddlewareReaderProtocolPA2A6Monoid0C4TypeRpzrlE8identityxvpZ":{"name":"identity","abstract":"<p>An identity MiddlewareReader ignores whatever Dependencies are given and simply return an identity Middleware. Composing any given middleware","parent_name":"MiddlewareReaderProtocol"},"Protocols/ReduxStoreProtocol.html#/s:8SwiftRex18ReduxStoreProtocolP14MiddlewareTypeQa":{"name":"MiddlewareType","abstract":"<p>Undocumented</p>","parent_name":"ReduxStoreProtocol"},"Protocols/ReduxStoreProtocol.html#/s:8SwiftRex18ReduxStoreProtocolP8pipelineAA0C15PipelineWrapperVy14MiddlewareTypeQzGvp":{"name":"pipeline","abstract":"<p>Undocumented</p>","parent_name":"ReduxStoreProtocol"},"Protocols/ReduxStoreProtocol.html#/s:8SwiftRex13ActionHandlerP8dispatch_4fromy0C4TypeQz_AA0C6SourceVtF":{"name":"dispatch(_:from:)","parent_name":"ReduxStoreProtocol"},"Protocols/StoreType.html#/s:8SwiftRex9StoreTypePAAE10projection6action5stateAA03AnycD0Vyqd__qd_0_G06ActionD0QzSgqd__c_qd_0_05StateD0Qzctr0_lF":{"name":"projection(action:state:)","abstract":"<p>Undocumented</p>","parent_name":"StoreType"},"Protocols/StoreType.html#/s:8SwiftRex9StoreTypePAAE010eraseToAnycD0AA0gcD0Vy06ActionD0Qz05StateD0QzGyF":{"name":"eraseToAnyStoreType()","abstract":"<p>Undocumented</p>","parent_name":"StoreType"},"Protocols/StoreType.html#/s:8SwiftRex9StoreTypePAAE15contramapActionyAA03AnycD0Vyqd__05StateD0QzG0fD0Qzqd__clF":{"name":"contramapAction(_:)","abstract":"<p>Undocumented</p>","parent_name":"StoreType"},"Protocols/StoreType.html#/s:8SwiftRex9StoreTypePAAE8mapStateyAA03AnycD0Vy06ActionD0Qzqd__Gqd__0fD0QzclF":{"name":"mapState(_:)","abstract":"<p>Undocumented</p>","parent_name":"StoreType"},"Protocols/StateProvider.html#/s:8SwiftRex13StateProviderP0C4TypeQa":{"name":"StateType","abstract":"<p>This can be a global state, or a view state that is a not a source-of-truth but only a struct calculated and","parent_name":"StateProvider"},"Protocols/StateProvider.html#/s:8SwiftRex13StateProviderP14statePublisherAA0F4TypeVy0cG0Qzs5NeverOGvp":{"name":"statePublisher","abstract":"<p>The state publisher that can be observed by counterparts</p>","parent_name":"StateProvider"},"Protocols/StateProvider.html#/s:8SwiftRex13StateProviderPAAE010eraseToAnycD0AA0gcD0Vy0C4TypeQzGyF":{"name":"eraseToAnyStateProvider()","abstract":"<p>Undocumented</p>","parent_name":"StateProvider"},"Protocols/StateProvider.html#/s:8SwiftRex13StateProviderPAAE3mapyAA03AnycD0Vyqd__Gqd__0C4TypeQzclF":{"name":"map(_:)","abstract":"<p>Undocumented</p>","parent_name":"StateProvider"},"Protocols/ActionHandler.html#/s:8SwiftRex13ActionHandlerP0C4TypeQa":{"name":"ActionType","abstract":"<p>Undocumented</p>","parent_name":"ActionHandler"},"Protocols/ActionHandler.html#/s:8SwiftRex13ActionHandlerP8dispatch_4fromy0C4TypeQz_AA0C6SourceVtF":{"name":"dispatch(_:from:)","abstract":"<p>The function that allows Views, ViewControllers, Presenters to dispatch actions to the store.","parent_name":"ActionHandler"},"Protocols/ActionHandler.html#/s:8SwiftRex13ActionHandlerPAAE010eraseToAnycD0AA0gcD0Vy0C4TypeQzGyF":{"name":"eraseToAnyActionHandler()","abstract":"<p>Erases the provided <code>ActionHandler</code> by using its inner methods from a newly created wrapper of type <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/AnyActionHandler.html\">AnyActionHandler</a></code></p>","parent_name":"ActionHandler"},"Protocols/ActionHandler.html#/s:8SwiftRex13ActionHandlerPAAE8dispatch_4file8function4line4infoy0C4TypeQz_S2SSuSSSgtF":{"name":"dispatch(_:file:function:line:info:)","abstract":"<p>The function that allows Views, ViewControllers, Presenters to dispatch actions to the store.","parent_name":"ActionHandler"},"Protocols/ActionHandler.html#/s:8SwiftRex13ActionHandlerPAAE9contramapyAA03AnycD0Vyqd__G0C4TypeQzqd__clF":{"name":"contramap(_:)","abstract":"<p>Pullback an <code>ActionHandler</code> working in a local action context, into a new <code>ActionHandler</code> working in a more global action context.</p>","parent_name":"ActionHandler"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP15InputActionTypeQa":{"name":"InputActionType","abstract":"<p>The Action type that this <code>Middleware</code> knows how to handle, so the store will forward actions of this type to this middleware.","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP16OutputActionTypeQa":{"name":"OutputActionType","abstract":"<p>The Action type that this <code>Middleware</code> will eventually trigger back to the store in response of side-effects. This can be the same as","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP9StateTypeQa":{"name":"StateType","abstract":"<p>The State part that this <code>Middleware</code> needs to read in order to make decisions. This middleware will be able to read the most up-to-date","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP14receiveContext8getState6outputy0G4TypeQzyc_AA16AnyActionHandlerVy06OutputkI0QzGtF":{"name":"receiveContext(getState:output:)","abstract":"<p>Middleware setup. This function will be called before actions are handled to the middleware, so you can configure your middleware with the given","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handle6action4from12afterReducery15InputActionTypeQz_AA0J6SourceVAA05AfterH0VztF":{"name":"handle(action:from:afterReducer:)","abstract":"<p>Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch additional actions.","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE010eraseToAnyC0AA0fC0Vy15InputActionTypeQz06OutputhI0Qz05StateI0QzGyF":{"name":"eraseToAnyMiddleware()","abstract":"<p>Undocumented</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4lift11inputAction06outputF05stateAA04LiftC0Vyqd__qd_0_qd_1_xG05InputF4TypeQzSgqd__c_qd_0_06OutputfK0Qzc05StateK0Qzqd_1_ctr1_lF":{"name":"lift(inputAction:outputAction:state:)","abstract":"<p>A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4lift12outputAction5stateAA04LiftC0Vyqd__qd_0_qd_1_xGqd_0_06OutputF4TypeQzc_05StateJ0Qzqd_1_ct05InputfJ0QzRsd__r1_lF":{"name":"lift(outputAction:state:)","abstract":"<p>A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4lift11inputAction5stateAA04LiftC0Vyqd__qd_0_qd_1_xG05InputF4TypeQzSgqd__c_05StateJ0Qzqd_1_ct06OutputfJ0QzRsd_0_r1_lF":{"name":"lift(inputAction:state:)","abstract":"<p>A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4lift11inputAction06outputF0AA04LiftC0Vyqd__qd_0_qd_1_xG05InputF4TypeQzSgqd__c_qd_0_06OutputfJ0Qzct05StateJ0QzRsd_1_r1_lF":{"name":"lift(inputAction:outputAction:)","abstract":"<p>A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4lift11inputActionAA04LiftC0Vyqd__qd_0_qd_1_xG05InputF4TypeQzSgqd__c_t06OutputfI0QzRsd_0_05StateI0QzRsd_1_r1_lF":{"name":"lift(inputAction:)","abstract":"<p>A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4lift12outputActionAA04LiftC0Vyqd__qd_0_qd_1_xGqd_0_06OutputF4TypeQzc_t05InputfI0QzRsd__05StateI0QzRsd_1_r1_lF":{"name":"lift(outputAction:)","abstract":"<p>A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4lift5stateAA04LiftC0Vyqd__qd_0_qd_1_xG9StateTypeQzqd_1_c_t011InputActionH0QzRsd__06OutputjH0QzRsd_0_r1_lF":{"name":"lift(state:)","abstract":"<p>A method used to transform a middleware focused in a specific substate into a middleware that can be plugged in a global scope and composed with","parent_name":"Middleware"},"Protocols/Middleware.html":{"name":"Middleware","abstract":"<p>⛓ <code>Middleware</code> is a plugin, or a composition of several plugins, that are assigned to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ReduxStoreProtocol.html\">ReduxStoreProtocol</a></code> pipeline in order to handle each"},"Protocols/ActionHandler.html":{"name":"ActionHandler","abstract":"<p><code>ActionHandler</code> defines a protocol for entities able to handle actions - defined by the associated type <code>ActionType</code>.</p>"},"Protocols/StateProvider.html":{"name":"StateProvider","abstract":"<p><code>StateProvider</code> defines a protocol for entities able to offer state publishers (Combine Publisher, RxSwift Observable,"},"Protocols/StoreType.html":{"name":"StoreType","abstract":"<p>🏪 <code>StoreType</code> defines a protocol for a state store.</p>"},"Protocols/ReduxStoreProtocol.html":{"name":"ReduxStoreProtocol","abstract":"<p>Undocumented</p>"},"Protocols/MiddlewareReaderProtocol.html":{"name":"MiddlewareReaderProtocol","abstract":"<p>A protocol to generalize MiddlewareReader. Unless you look for some very special behaviour, you should use MiddlewareReader directly which"},"Protocols/Semigroup.html":{"name":"Semigroup","abstract":"<p>Protocol for a semigroup, any algebraic structure that allows two of its elements to be combined into one,"},"Protocols/Monoid.html":{"name":"Monoid","abstract":"<p>Protocol for a monoid algebra, allowing monoidal composition. It&rsquo;s a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Semigroup.html\">Semigroup</a></code> with identity element, element which,"},"Protocols/SubscriptionType.html":{"name":"SubscriptionType","abstract":"<p>Abstraction over subscription types from reactive frameworks."},"Protocols/SubscriptionCollection.html":{"name":"SubscriptionCollection","abstract":"<p>Abstraction over subscription collection (<code>DisposeBag</code> or <code>Set&lt;AnyCancellable</code> depending on your chosen reactive framework), useful for keeping"},"Functions.html#/s:8SwiftRex2lgoiyAA12AfterReducerVAD_ADtF":{"name":"<>(_:_:)","abstract":"<p>The combination between two <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/AfterReducer.html\">AfterReducer</a></code> instances occur in reverse order so the first middleware will have its &ldquo;after reducer&rdquo; closure executed"},"Functions.html#/s:8SwiftRex2lgoiyAA18ComposedMiddlewareVy15InputActionTypeQz06OutputgH0Qz05StateH0QzGx_q_tAA0E0RzAaLR_AEQy_AFRSAGQy_AHRSAIQy_AJRSr0_lF":{"name":"<>(_:_:)","abstract":"<p>Initializes a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ComposedMiddleware.html\">ComposedMiddleware</a></code> from the <code>lhs</code> and <code>rhs</code> middlewares parameters, or appends to the <code>lhs</code> if it is already a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ComposedMiddleware.html\">ComposedMiddleware</a></code>, as shown below:</p>"},"Extensions/Collection.html#/s:Sl8SwiftRexAA12AfterReducerV7ElementRtzrlE02ascD0ACyF":{"name":"asAfterReducer()","abstract":"<p>Reduces a collection of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/AfterReducer.html\">AfterReducer</a></code> closures into a single <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/AfterReducer.html\">AfterReducer</a></code> closure. Useful when a group of middlewares ran, we collected","parent_name":"Collection"},"Extensions/Collection.html":{"name":"Collection"},"Enums/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueO6alwaysyACyxGAEmlF":{"name":"always","abstract":"<p>It will always emit changes, regardless of previous and new state</p>","parent_name":"ShouldEmitValue"},"Enums/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueO5neveryACyxGAEmlF":{"name":"never","abstract":"<p>It will never emit changes, regardless of previous and new state</p>","parent_name":"ShouldEmitValue"},"Enums/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueO4whenyACyxGSbx_xtccAEmlF":{"name":"when(_:)","abstract":"<p>It&rsquo;s a custom-defined predicate, you&rsquo;ll be given old and new state, and must return a Bool indicating what you&rsquo;ve decided from that change,","parent_name":"ShouldEmitValue"},"Enums/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueO06shouldD08previous3newSbx_xtF":{"name":"shouldEmit(previous:new:)","abstract":"<p>Evaluates the predicate and returns <code>true</code> in case this should be emitted, or <code>false</code> in case this change should be ignored</p>","parent_name":"ShouldEmitValue"},"Enums/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueO12shouldRemove8previous3newSbx_xtF":{"name":"shouldRemove(previous:new:)","abstract":"<p>Evaluates the predicate and returns <code>true</code> in case this should be ignored, or <code>false</code> in case this change should be emitted. It&rsquo;s the exact","parent_name":"ShouldEmitValue"},"Enums/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueOAASQRzlE13whenDifferentACyxGvpZ":{"name":"whenDifferent","abstract":"<p>For <code>Equatable</code> structures, <code>.whenDifferent</code> will run <code>==</code> operator between old and new state, and notify when they are different, or ignore","parent_name":"ShouldEmitValue"},"Enums/ShouldEmitValue.html":{"name":"ShouldEmitValue","abstract":"<p>A predicate that determines if a state change should notify subscribers or not, by comparing previous and new states and returning a Bool true in"},"Classes/ReduxStoreBase.html#/s:8SwiftRex14ReduxStoreBaseC8pipelineAA0C15PipelineWrapperVyAA13AnyMiddlewareVyxxq_GGvp":{"name":"pipeline","abstract":"<p>Pipeline to execute upon action arrival, containing all middlewares and reducers</p>","parent_name":"ReduxStoreBase"},"Classes/ReduxStoreBase.html#/s:8SwiftRex14ReduxStoreBaseC14statePublisherAA0G4TypeVyq_s5NeverOGvp":{"name":"statePublisher","abstract":"<p>State publisher which can be subscribed in order to be notified on every mutation</p>","parent_name":"ReduxStoreBase"},"Classes/ReduxStoreBase.html#/s:8SwiftRex14ReduxStoreBaseC7subject7reducer10middleware10emitsValueACyxq_GAA21ReplayLastSubjectTypeVyq_s5NeverOG_AA7ReducerVyxq_Gqd__AA010ShouldEmitJ0Oyq_Gtc011InputActionN0Qyd__Rsz05StateN0Qyd__Rs_AA10MiddlewareRd__06OutputtN0Qyd__AURSlufc":{"name":"init(subject:reducer:middleware:emitsValue:)","abstract":"<p>Required initializer that configures the action handler pipeline and the state storage</p>","parent_name":"ReduxStoreBase"},"Classes/ReduxStoreBase.html":{"name":"ReduxStoreBase","abstract":"<p>🏪 <code>ReduxStoreBase</code> is a base class that can be used to create the main store of an app, using the redux pattern.</p>"},"actionenumproperties.html":{"name":"ActionEnumProperties"},"quickguide.html":{"name":"QuickGuide"},"statemanagement.html":{"name":"StateManagement"},"combinerex.html":{"name":"CombineRex"},"reactiveswiftrex.html":{"name":"ReactiveSwiftRex"},"rxswiftrex.html":{"name":"RxSwiftRex"},"swiftrex.html":{"name":"SwiftRex"},"uikitlifetimemanagement.html":{"name":"UIKitLifetimeManagement"},"Guides.html":{"name":"Guides","abstract":"<p>The following guides are available globally.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}